<?php

/**
 * @file
 * Functions to support theming in the OpenChurch Theme theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function openchurch_theme_preprocess_html(&$variables) {
  $inline_css = '';

  if ($link_color = theme_get_setting('link_color')) {
    $inline_css .= 'a, .nav-link, .nav-link:focus, .nav-link:hover, .page-link, .page-link:hover, .page-link:focus, footer a:hover { color: ' . $link_color . '; }';
  }

  if ($nav_active_color = theme_get_setting('nav_active_color')) {
    $inline_css .= 'body .navbar-dark .navbar-nav .nav-link.active, body .navbar-dark .navbar-nav .nav-link:hover { color: ' . $nav_active_color . ' !important; }';
    $inline_css .= 'footer a { color: ' . $nav_active_color . '; }';
  }

  if ($button_color = theme_get_setting('button_color')) {
    $inline_css .= '.btn-primary, .page-item.active .page-link, .bg-primary { background-color: ' . $button_color . ' !important; }';
  }

  if ($button_border = theme_get_setting('button_border')) {
    $inline_css .= '.btn-primary, .page-item.active .page-link { border-color: ' . $button_border . '; }';
  }

  if ($button_hover = theme_get_setting('button_hover')) {
    $inline_css .= '.btn-primary:hover, .btn-primary:active, btn-primary:focus, .btn-check:focus+.btn-primary, .btn-primary:focus { background-color: ' . $button_hover . ' !important; color: #ccc; }';
  }

  if ($button_hover = theme_get_setting('button_hover_border')) {
    $inline_css .= '.btn-primary:hover, .btn-primary:active, btn-primary:focus, .btn-check:focus+.btn-primary, .btn-primary:focus { border-color: ' . $button_hover . ';}';
  }

  if ($bg_dark_color = theme_get_setting('bg_dark_color')) {
    $inline_css .= '.bg-dark, .scrolled { background-color: ' . $bg_dark_color . ' !important; }';
    $inline_css .= '@media (max-width: 991px) { .sticky-top, .fixed-top { background-color: ' . $bg_dark_color . ' !important; }}';
  }

  if ($bg_secondary_color = theme_get_setting('bg_secondary_color')) {
    $inline_css .= '.bg-secondary { background-color: ' . $bg_secondary_color . ' !important; }';
  }

  if ($dropdown_active_color = theme_get_setting('dropdown_active_color')) {
    $inline_css .= '.dropdown-item.active, .dropdown-item:active { background-color: ' . $dropdown_active_color . ' !important; }';
  }

  // Add custom inline CSS.
  $variables['inline_css'] = [
    '#type' => 'inline_template',
    '#template' => '<style type="text/css">{{ css }}</style>',
    '#context' => [
      'css' => $inline_css,
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function openchurch_theme_preprocess_page(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function openchurch_theme_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Override event node template.
  if ($variables['node']->getType() == 'event') {
    $time = $formatted_date = $link = '';

    // Format the date and time.
    if (!empty($node->get('field_date')->value)) {
      $date_value = $node->get('field_date')->value;
      $date = date_create($date_value);
      $formatted_date = date_format($date, "d F Y");
      $time = date_format($date, "h:i A");
      $date_short = date_format($date, "M d");
    }

    $variables['date'] = $formatted_date;
    $variables['date_short'] = $date_short;
    $variables['time'] = $time;
    $variables['location'] = $node->get('field_location')->value;
    $variables['link'] = $link;
  }
}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function openchurch_theme_form_alter(
  &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
   if (in_array($form_id, ['search_block_form', 'search_form'])) {
     $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
     if (!isset($form[$key]['submit']['#attributes'])) {
       $form[$key]['submit']['#attributes'] = new Attribute();
     }
     $form[$key]['submit']['#attributes']->addClass(['btn-primary', 'btn-sm']);
   }
   if (in_array($form_id, ['search_block_form'])) {
    $form['keys']['#attributes']['placeholder'] = t('Search');
    $form['keys']['#title'] = '';
    $form['keys']['#attributes']['class'][] = 'form-control-sm';
   }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function openchurch_theme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements theme_preprocess_image().
 */
function openchurch_theme_preprocess_image(&$variables) {
  if (!empty($variables['attributes']['class']) && is_string($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [$variables['attributes']['class']];
  }
  $variables['attributes']['class'][] = 'img-fluid';
}

/**
 * Implements theme_preprocess_field().
 */
function openchurch_theme_preprocess_field(&$variables) {
  $element = $variables['element'];
  if (isset($element['#field_name'])) {
    // Add Thumbnail image to gallery field_images.
    if ($element['#field_name'] == 'field_images' && $element['#bundle'] == 'gallery') {
      foreach ($variables['items'] as $key => $item) {
        if (isset($item['content']['#media']->field_media_image->entity)) {
          $uri = $item['content']['#media']->field_media_image->entity->getFileUri();
          $style = ImageStyle::load('gallery_thumb');
          if (isset($style)) {
            $variables['items'][$key]['thumbnail'] = $style->buildUrl($uri);
          }
        }
      }
    }
    elseif ($element['#field_name'] == 'field_tags') {
      $variables['blog_path_path'] = theme_get_setting('blog_page_path');
      $variables['events_page_path'] = theme_get_setting('events_page_path');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function openchurch_theme_preprocess_menu(&$variables) {
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_logo'] = theme_get_setting('logo.url');
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function openchurch_theme_preprocess_page_title(&$variables) {

  // Get current page path.
  if ($path = \Drupal::service('path.current')->getPath()) {
    $path_args = explode('/', $path);

    // Append search tag to blog view page title.
    if ($blog_path = theme_get_setting('blog_page_path')) {
      // Remove leading slash.
      $blog_path = ltrim($blog_path, '/');

      if ($path_args[1] == 'blog' && ctype_digit($path_args[2])) {
        $taxonomy_term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($path_args[2]);

        if (!empty($taxonomy_term)) {
          $variables['title']['#markup'] .= ': "' . $taxonomy_term->getName() . '"';
        }
      }
    }

    // Append search tag to event view page title.
    if ($events_path = theme_get_setting('events_page_path')) {
      // Remove leading slash.
      $events_path = ltrim($events_path, '/');

      // Append search tag to page title.
      if ($path_args[1] == $events_path && ctype_digit($path_args[2])) {
        $taxonomy_term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($path_args[2]);

        if (!empty($taxonomy_term)) {
          $variables['title']['#markup'] .= ': "' . $taxonomy_term->getName() . '"';
        }
      }
    }
  }
}
